Spring MVC


HTTP Protocol 구조
Method-Header-Body

HttpServletRequest(WAS) -> Servlet/JSP/필터
HttpServletResponse 객체를 만듬

web.xml = DeploymentDescriptor(배포기술자)

WAS에서 메모리에 Servlet이 없으면 메모리에 올리고 init 메소드 실행
이미 메모리에 있으면 service 메소드 실행
Servlet은 Singleton 이다. 메모리에 하나만 있음.

Service는 TemplateMethod Pattern으로 되어 있다.


DispatcherServlet이 모든 요청을 받는다.

WAS는 기본적으로 DefaultServlet 을 가지고 있다.

DispatcherServlet에 매핑되어있지 않는 path는 DefaultServlet에서 처리하도록 매핑해야한다.

Servlet3.0 부터는 web.xml 이 필요없음.


@Configuration : Java Config
@ComponentScan : base package부터 그 하위에서 @Component를 찾아서 Bean으로 등록해준다. 대표적인 Component: @Controller, @Service, @Repository
왜 @Component 하위에 다양하게 있는가?
관점때문(Aspect를 사용하기 위해)(Controller, Service, Repository는 Layerd Architecture이다, 가로)

@ResponseBody가 없으면 컨트롤러의 Return값은 View의 이름이 됨.

@Controller : 화면(View)로 응답하는 애플리케이션
@RestController : 데이터로 응답하는 애플리케이션 (ResponseBody에 그대로 실어 보냄)

POJO : 그것은 클래스 상속을 강제하지 않고, 인터페이스 구현을 강제하지 않으며, 애노테이션 사용을 강제하지 않는다.
특정한 라이브러리나 컨테이너의 기술에 종속적이지 않고, 가장 일반적인 형태로 작성된 Object

Controller가 리턴한 View명을 DispatcherServlet이 사용자가 요청한 정보를 바탕으로 알맞은 ViewResolver에 전달한다.
DTO : Data Transfer Object

Spring boot 는 Message Converter를 가지고 있다.




